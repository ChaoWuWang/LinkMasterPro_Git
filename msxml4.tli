//           GENERATED SOURCE FILE - DO NOT EDIT                  
//                                                                
// This source file was generated by the Borland C++ compiler     
// in response to a #import directive for the type library :      
// 		C                                                         
//                                                                
#pragma once                                                      

//
// Interface ISAXXMLReader wrapper methods:
//

inline boolean ISAXXMLReader::getFeature(
    unsigned short* pwchName )
{
  boolean _result;
  HRESULT _hr = raw_getFeature( pwchName, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _result;
}

inline HRESULT ISAXXMLReader::putFeature(
    unsigned short* pwchName,
    boolean vfValue )
{
  HRESULT _hr = raw_putFeature( pwchName, vfValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline VARIANT ISAXXMLReader::getProperty(
    unsigned short* pwchName )
{
  VARIANT _result;
  VariantInit( &_result);
  HRESULT _hr = raw_getProperty( pwchName, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _variant_t( _result, false ) ;
}

inline HRESULT ISAXXMLReader::putProperty(
    unsigned short* pwchName,
    VARIANT varValue )
{
  HRESULT _hr = raw_putProperty( pwchName, varValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline ISAXEntityResolver* ISAXXMLReader::getEntityResolver( )
{
  ISAXEntityResolver* _result;
  HRESULT _hr = raw_getEntityResolver( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return ISAXEntityResolverPtr( _result, false ) ;
}

inline HRESULT ISAXXMLReader::putEntityResolver(
    ISAXEntityResolver* pResolver )
{
  HRESULT _hr = raw_putEntityResolver( pResolver );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline ISAXContentHandler* ISAXXMLReader::getContentHandler( )
{
  ISAXContentHandler* _result;
  HRESULT _hr = raw_getContentHandler( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return ISAXContentHandlerPtr( _result, false ) ;
}

inline HRESULT ISAXXMLReader::putContentHandler(
    ISAXContentHandler* pHandler )
{
  HRESULT _hr = raw_putContentHandler( pHandler );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline ISAXDTDHandler* ISAXXMLReader::getDTDHandler( )
{
  ISAXDTDHandler* _result;
  HRESULT _hr = raw_getDTDHandler( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return ISAXDTDHandlerPtr( _result, false ) ;
}

inline HRESULT ISAXXMLReader::putDTDHandler(
    ISAXDTDHandler* pHandler )
{
  HRESULT _hr = raw_putDTDHandler( pHandler );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline ISAXErrorHandler* ISAXXMLReader::getErrorHandler( )
{
  ISAXErrorHandler* _result;
  HRESULT _hr = raw_getErrorHandler( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return ISAXErrorHandlerPtr( _result, false ) ;
}

inline HRESULT ISAXXMLReader::putErrorHandler(
    ISAXErrorHandler* pHandler )
{
  HRESULT _hr = raw_putErrorHandler( pHandler );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline unsigned short* ISAXXMLReader::getBaseURL( )
{
  unsigned short* _result;
  HRESULT _hr = raw_getBaseURL( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _result;
}

inline HRESULT ISAXXMLReader::putBaseURL(
    unsigned short* pwchBaseUrl )
{
  HRESULT _hr = raw_putBaseURL( pwchBaseUrl );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline unsigned short* ISAXXMLReader::getSecureBaseURL( )
{
  unsigned short* _result;
  HRESULT _hr = raw_getSecureBaseURL( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _result;
}

inline HRESULT ISAXXMLReader::putSecureBaseURL(
    unsigned short* pwchSecureBaseUrl )
{
  HRESULT _hr = raw_putSecureBaseURL( pwchSecureBaseUrl );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline HRESULT ISAXXMLReader::parse(
    VARIANT varInput )
{
  HRESULT _hr = raw_parse( varInput );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

inline HRESULT ISAXXMLReader::parseURL(
    unsigned short* pwchUrl )
{
  HRESULT _hr = raw_parseURL( pwchUrl );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLReader ) );
  return _hr;
}

//
// Interface ISAXEntityResolver wrapper methods:
//

inline VARIANT ISAXEntityResolver::resolveEntity(
    unsigned short* pwchPublicId,
    unsigned short* pwchSystemId )
{
  VARIANT _result;
  VariantInit( &_result);
  HRESULT _hr = raw_resolveEntity( pwchPublicId, pwchSystemId, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXEntityResolver ) );
  return _variant_t( _result, false ) ;
}

//
// Interface ISAXContentHandler wrapper methods:
//

inline HRESULT ISAXContentHandler::putDocumentLocator(
    ISAXLocator* pLocator )
{
  HRESULT _hr = raw_putDocumentLocator( pLocator );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::startDocument( )
{
  HRESULT _hr = raw_startDocument( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::endDocument( )
{
  HRESULT _hr = raw_endDocument( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::startPrefixMapping(
    unsigned short* pwchPrefix,
    int cchPrefix,
    unsigned short* pwchUri,
    int cchUri )
{
  HRESULT _hr = raw_startPrefixMapping( pwchPrefix, cchPrefix, pwchUri, cchUri );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::endPrefixMapping(
    unsigned short* pwchPrefix,
    int cchPrefix )
{
  HRESULT _hr = raw_endPrefixMapping( pwchPrefix, cchPrefix );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::startElement(
    unsigned short* pwchNamespaceUri,
    int cchNamespaceUri,
    unsigned short* pwchLocalName,
    int cchLocalName,
    unsigned short* pwchQName,
    int cchQName,
    ISAXAttributes* pAttributes )
{
  HRESULT _hr = raw_startElement( pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName, pAttributes );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::endElement(
    unsigned short* pwchNamespaceUri,
    int cchNamespaceUri,
    unsigned short* pwchLocalName,
    int cchLocalName,
    unsigned short* pwchQName,
    int cchQName )
{
  HRESULT _hr = raw_endElement( pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::characters(
    unsigned short* pwchChars,
    int cchChars )
{
  HRESULT _hr = raw_characters( pwchChars, cchChars );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::ignorableWhitespace(
    unsigned short* pwchChars,
    int cchChars )
{
  HRESULT _hr = raw_ignorableWhitespace( pwchChars, cchChars );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::processingInstruction(
    unsigned short* pwchTarget,
    int cchTarget,
    unsigned short* pwchData,
    int cchData )
{
  HRESULT _hr = raw_processingInstruction( pwchTarget, cchTarget, pwchData, cchData );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

inline HRESULT ISAXContentHandler::skippedEntity(
    unsigned short* pwchName,
    int cchName )
{
  HRESULT _hr = raw_skippedEntity( pwchName, cchName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXContentHandler ) );
  return _hr;
}

//
// Interface ISAXLocator wrapper methods:
//

inline int ISAXLocator::getColumnNumber( )
{
  int _result;
  HRESULT _hr = raw_getColumnNumber( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLocator ) );
  return _result;
}

inline int ISAXLocator::getLineNumber( )
{
  int _result;
  HRESULT _hr = raw_getLineNumber( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLocator ) );
  return _result;
}

inline unsigned short* ISAXLocator::getPublicId( )
{
  unsigned short* _result;
  HRESULT _hr = raw_getPublicId( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLocator ) );
  return _result;
}

inline unsigned short* ISAXLocator::getSystemId( )
{
  unsigned short* _result;
  HRESULT _hr = raw_getSystemId( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLocator ) );
  return _result;
}

//
// Interface ISAXAttributes wrapper methods:
//

inline int ISAXAttributes::getLength( )
{
  int _result;
  HRESULT _hr = raw_getLength( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _result;
}

inline HRESULT ISAXAttributes::getURI(
    int nIndex,
    unsigned short** ppwchUri,
    int* pcchUri )
{
  HRESULT _hr = raw_getURI( nIndex, ppwchUri, pcchUri );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getLocalName(
    int nIndex,
    unsigned short** ppwchLocalName,
    int* pcchLocalName )
{
  HRESULT _hr = raw_getLocalName( nIndex, ppwchLocalName, pcchLocalName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getQName(
    int nIndex,
    unsigned short** ppwchQName,
    int* pcchQName )
{
  HRESULT _hr = raw_getQName( nIndex, ppwchQName, pcchQName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getName(
    int nIndex,
    unsigned short** ppwchUri,
    int* pcchUri,
    unsigned short** ppwchLocalName,
    int* pcchLocalName,
    unsigned short** ppwchQName,
    int* pcchQName )
{
  HRESULT _hr = raw_getName( nIndex, ppwchUri, pcchUri, ppwchLocalName, pcchLocalName, ppwchQName, pcchQName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline int ISAXAttributes::getIndexFromName(
    unsigned short* pwchUri,
    int cchUri,
    unsigned short* pwchLocalName,
    int cchLocalName )
{
  int _result;
  HRESULT _hr = raw_getIndexFromName( pwchUri, cchUri, pwchLocalName, cchLocalName, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _result;
}

inline int ISAXAttributes::getIndexFromQName(
    unsigned short* pwchQName,
    int cchQName )
{
  int _result;
  HRESULT _hr = raw_getIndexFromQName( pwchQName, cchQName, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _result;
}

inline HRESULT ISAXAttributes::getType(
    int nIndex,
    unsigned short** ppwchType,
    int* pcchType )
{
  HRESULT _hr = raw_getType( nIndex, ppwchType, pcchType );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getTypeFromName(
    unsigned short* pwchUri,
    int cchUri,
    unsigned short* pwchLocalName,
    int cchLocalName,
    unsigned short** ppwchType,
    int* pcchType )
{
  HRESULT _hr = raw_getTypeFromName( pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchType, pcchType );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getTypeFromQName(
    unsigned short* pwchQName,
    int cchQName,
    unsigned short** ppwchType,
    int* pcchType )
{
  HRESULT _hr = raw_getTypeFromQName( pwchQName, cchQName, ppwchType, pcchType );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getValue(
    int nIndex,
    unsigned short** ppwchValue,
    int* pcchValue )
{
  HRESULT _hr = raw_getValue( nIndex, ppwchValue, pcchValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getValueFromName(
    unsigned short* pwchUri,
    int cchUri,
    unsigned short* pwchLocalName,
    int cchLocalName,
    unsigned short** ppwchValue,
    int* pcchValue )
{
  HRESULT _hr = raw_getValueFromName( pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchValue, pcchValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

inline HRESULT ISAXAttributes::getValueFromQName(
    unsigned short* pwchQName,
    int cchQName,
    unsigned short** ppwchValue,
    int* pcchValue )
{
  HRESULT _hr = raw_getValueFromQName( pwchQName, cchQName, ppwchValue, pcchValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXAttributes ) );
  return _hr;
}

//
// Interface ISAXDTDHandler wrapper methods:
//

inline HRESULT ISAXDTDHandler::notationDecl(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchPublicId,
    int cchPublicId,
    unsigned short* pwchSystemId,
    int cchSystemId )
{
  HRESULT _hr = raw_notationDecl( pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDTDHandler ) );
  return _hr;
}

inline HRESULT ISAXDTDHandler::unparsedEntityDecl(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchPublicId,
    int cchPublicId,
    unsigned short* pwchSystemId,
    int cchSystemId,
    unsigned short* pwchNotationName,
    int cchNotationName )
{
  HRESULT _hr = raw_unparsedEntityDecl( pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId, pwchNotationName, cchNotationName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDTDHandler ) );
  return _hr;
}

//
// Interface ISAXErrorHandler wrapper methods:
//

inline HRESULT ISAXErrorHandler::error(
    ISAXLocator* pLocator,
    unsigned short* pwchErrorMessage,
    HRESULT hrErrorCode )
{
  HRESULT _hr = raw_error( pLocator, pwchErrorMessage, hrErrorCode );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXErrorHandler ) );
  return _hr;
}

inline HRESULT ISAXErrorHandler::fatalError(
    ISAXLocator* pLocator,
    unsigned short* pwchErrorMessage,
    HRESULT hrErrorCode )
{
  HRESULT _hr = raw_fatalError( pLocator, pwchErrorMessage, hrErrorCode );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXErrorHandler ) );
  return _hr;
}

inline HRESULT ISAXErrorHandler::ignorableWarning(
    ISAXLocator* pLocator,
    unsigned short* pwchErrorMessage,
    HRESULT hrErrorCode )
{
  HRESULT _hr = raw_ignorableWarning( pLocator, pwchErrorMessage, hrErrorCode );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXErrorHandler ) );
  return _hr;
}

//
// Interface ISAXXMLFilter wrapper methods:
//

inline ISAXXMLReader* ISAXXMLFilter::getParent( )
{
  ISAXXMLReader* _result;
  HRESULT _hr = raw_getParent( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLFilter ) );
  return ISAXXMLReaderPtr( _result, false ) ;
}

inline HRESULT ISAXXMLFilter::putParent(
    ISAXXMLReader* pReader )
{
  HRESULT _hr = raw_putParent( pReader );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXXMLFilter ) );
  return _hr;
}

//
// Interface ISAXLexicalHandler wrapper methods:
//

inline HRESULT ISAXLexicalHandler::startDTD(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchPublicId,
    int cchPublicId,
    unsigned short* pwchSystemId,
    int cchSystemId )
{
  HRESULT _hr = raw_startDTD( pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::endDTD( )
{
  HRESULT _hr = raw_endDTD( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::startEntity(
    unsigned short* pwchName,
    int cchName )
{
  HRESULT _hr = raw_startEntity( pwchName, cchName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::endEntity(
    unsigned short* pwchName,
    int cchName )
{
  HRESULT _hr = raw_endEntity( pwchName, cchName );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::startCDATA( )
{
  HRESULT _hr = raw_startCDATA( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::endCDATA( )
{
  HRESULT _hr = raw_endCDATA( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

inline HRESULT ISAXLexicalHandler::comment(
    unsigned short* pwchChars,
    int cchChars )
{
  HRESULT _hr = raw_comment( pwchChars, cchChars );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXLexicalHandler ) );
  return _hr;
}

//
// Interface ISAXDeclHandler wrapper methods:
//

inline HRESULT ISAXDeclHandler::elementDecl(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchModel,
    int cchModel )
{
  HRESULT _hr = raw_elementDecl( pwchName, cchName, pwchModel, cchModel );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDeclHandler ) );
  return _hr;
}

inline HRESULT ISAXDeclHandler::attributeDecl(
    unsigned short* pwchElementName,
    int cchElementName,
    unsigned short* pwchAttributeName,
    int cchAttributeName,
    unsigned short* pwchType,
    int cchType,
    unsigned short* pwchValueDefault,
    int cchValueDefault,
    unsigned short* pwchValue,
    int cchValue )
{
  HRESULT _hr = raw_attributeDecl( pwchElementName, cchElementName, pwchAttributeName, cchAttributeName, pwchType, cchType, pwchValueDefault, cchValueDefault, pwchValue, cchValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDeclHandler ) );
  return _hr;
}

inline HRESULT ISAXDeclHandler::internalEntityDecl(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchValue,
    int cchValue )
{
  HRESULT _hr = raw_internalEntityDecl( pwchName, cchName, pwchValue, cchValue );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDeclHandler ) );
  return _hr;
}

inline HRESULT ISAXDeclHandler::externalEntityDecl(
    unsigned short* pwchName,
    int cchName,
    unsigned short* pwchPublicId,
    int cchPublicId,
    unsigned short* pwchSystemId,
    int cchSystemId )
{
  HRESULT _hr = raw_externalEntityDecl( pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( ISAXDeclHandler ) );
  return _hr;
}

//
// Interface IXMLDocument2 wrapper methods:
//

inline struct IXMLElement2* IXMLDocument2::Getroot( )
{
  struct IXMLElement2* _result;
  HRESULT _hr = get_root( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _result;
}

inline BSTR IXMLDocument2::Geturl( )
{
  BSTR _result;
  HRESULT _hr = get_url( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDocument2::Puturl(
    BSTR p )
{
  HRESULT _hr = put_url( p );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _hr;
}

inline long IXMLDocument2::GetreadyState( )
{
  long _result;
  HRESULT _hr = get_readyState( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _result;
}

inline BSTR IXMLDocument2::Getcharset( )
{
  BSTR _result;
  HRESULT _hr = get_charset( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDocument2::Putcharset(
    BSTR p )
{
  HRESULT _hr = put_charset( p );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _hr;
}

inline BSTR IXMLDocument2::Getversion( )
{
  BSTR _result;
  HRESULT _hr = get_version( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDocument2::Getdoctype( )
{
  BSTR _result;
  HRESULT _hr = get_doctype( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _bstr_t( _result, false ) ;
}

inline struct IXMLElement2* IXMLDocument2::createElement(
    VARIANT vType,
    VARIANT var1 )
{
  struct IXMLElement2* _result;
  HRESULT _hr = raw_createElement( vType, var1, &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _result;
}

inline boolean IXMLDocument2::Getasync( )
{
  boolean _result;
  HRESULT _hr = get_async( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _result;
}

inline HRESULT IXMLDocument2::Putasync(
    boolean pf )
{
  HRESULT _hr = put_async( pf );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLDocument2 ) );
  return _hr;
}

//
// Interface IXMLError wrapper methods:
//

inline HRESULT IXMLError::GetErrorInfo(
    struct _xml_error* pErrorReturn )
{
  HRESULT _hr = raw_GetErrorInfo( pErrorReturn );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IXMLError ) );
  return _hr;
}

//
// Interface IMXNamespaceManager wrapper methods:
//

inline HRESULT IMXNamespaceManager::putAllowOverride(
    boolean fOverride )
{
  HRESULT _hr = raw_putAllowOverride( fOverride );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline boolean IMXNamespaceManager::getAllowOverride( )
{
  boolean _result;
  HRESULT _hr = raw_getAllowOverride( &_result );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _result;
}

inline HRESULT IMXNamespaceManager::reset( )
{
  HRESULT _hr = raw_reset( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::pushContext( )
{
  HRESULT _hr = raw_pushContext( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::pushNodeContext(
    struct IXMLDOMNode* contextNode,
    boolean fDeep )
{
  HRESULT _hr = raw_pushNodeContext( contextNode, fDeep );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::popContext( )
{
  HRESULT _hr = raw_popContext( );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::declarePrefix(
    unsigned short* prefix,
    unsigned short* namespaceURI )
{
  HRESULT _hr = raw_declarePrefix( prefix, namespaceURI );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::getDeclaredPrefix(
    long nIndex,
    unsigned short* pwchPrefix,
    int* pcchPrefix )
{
  HRESULT _hr = raw_getDeclaredPrefix( nIndex, pwchPrefix, pcchPrefix );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::getPrefix(
    unsigned short* pwszNamespaceURI,
    long nIndex,
    unsigned short* pwchPrefix,
    int* pcchPrefix )
{
  HRESULT _hr = raw_getPrefix( pwszNamespaceURI, nIndex, pwchPrefix, pcchPrefix );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

inline HRESULT IMXNamespaceManager::getURI(
    unsigned short* pwchPrefix,
    struct IXMLDOMNode* pContextNode,
    unsigned short* pwchUri,
    int* pcchUri )
{
  HRESULT _hr = raw_getURI( pwchPrefix, pContextNode, pwchUri, pcchUri );
  if ( FAILED( _hr ) ) _com_issue_errorex( _hr, this, __uuidof( IMXNamespaceManager ) );
  return _hr;
}

//
// Interface IXMLDOMImplementation wrapper methods:
//

inline boolean IXMLDOMImplementation::hasFeature(
    BSTR feature,
    BSTR version )
{
  boolean _result;
  _com_dispatch_method( this, 0x91, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008\x0008", feature, version);
  return _result;
}

//
// Interface IXMLDOMNode wrapper methods:
//

inline BSTR IXMLDOMNode::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMNode::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNode::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMNode::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMNode::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMNode::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMNode::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMNode::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMNode::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNode::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMNode::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMNode::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMNode::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNode::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMNode::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNode::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMNode::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNode::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMNode::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNode::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMNode::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMNode::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNode::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNode::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMNode::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

//
// Interface IXMLDOMNodeList wrapper methods:
//

inline struct IXMLDOMNode* IXMLDOMNodeList::Getitem(
    long index )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", index);
  return _result;
}

inline long IXMLDOMNodeList::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x4a, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNodeList::nextNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x4c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMNodeList::reset( )
{
  return _com_dispatch_method( this, 0x4d, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IXMLDOMNamedNodeMap wrapper methods:
//

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::getNamedItem(
    BSTR name )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x53, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::setNamedItem(
    struct IXMLDOMNode* newItem )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x54, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newItem);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::removeNamedItem(
    BSTR name )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x55, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::Getitem(
    long index )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", index);
  return _result;
}

inline long IXMLDOMNamedNodeMap::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x4a, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::getQualifiedItem(
    BSTR baseName,
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x57, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008\x0008", baseName, namespaceURI);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::removeQualifiedItem(
    BSTR baseName,
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x58, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008\x0008", baseName, namespaceURI);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNamedNodeMap::nextNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x59, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMNamedNodeMap::reset( )
{
  return _com_dispatch_method( this, 0x5a, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IXMLDOMDocument wrapper methods:
//

inline BSTR IXMLDOMDocument::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMDocument::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMDocument::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocument::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMDocument::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMDocument::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMDocument::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMDocument::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMDocument::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMDocument::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMDocument::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMDocument::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocument::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline struct IXMLDOMDocumentType* IXMLDOMDocument::Getdoctype( )
{
  struct IXMLDOMDocumentType* _result;
  _com_dispatch_method( this, 0x26, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMImplementation* IXMLDOMDocument::Getimplementation( )
{
  struct IXMLDOMImplementation* _result;
  _com_dispatch_method( this, 0x27, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMElement* IXMLDOMDocument::GetdocumentElement( )
{
  struct IXMLDOMElement* _result;
  _com_dispatch_method( this, 0x28, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument::PutRefdocumentElement(
    struct IXMLDOMElement* rhs )
{
  return _com_dispatch_method( this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IXMLDOMElement* IXMLDOMDocument::createElement(
    BSTR tagName )
{
  struct IXMLDOMElement* _result;
  _com_dispatch_method( this, 0x29, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", tagName);
  return _result;
}

inline struct IXMLDOMDocumentFragment* IXMLDOMDocument::createDocumentFragment( )
{
  struct IXMLDOMDocumentFragment* _result;
  _com_dispatch_method( this, 0x2a, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMText* IXMLDOMDocument::createTextNode(
    BSTR data )
{
  struct IXMLDOMText* _result;
  _com_dispatch_method( this, 0x2b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMComment* IXMLDOMDocument::createComment(
    BSTR data )
{
  struct IXMLDOMComment* _result;
  _com_dispatch_method( this, 0x2c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMCDATASection* IXMLDOMDocument::createCDATASection(
    BSTR data )
{
  struct IXMLDOMCDATASection* _result;
  _com_dispatch_method( this, 0x2d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMProcessingInstruction* IXMLDOMDocument::createProcessingInstruction(
    BSTR target,
    BSTR data )
{
  struct IXMLDOMProcessingInstruction* _result;
  _com_dispatch_method( this, 0x2e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008\x0008", target, data);
  return _result;
}

inline struct IXMLDOMAttribute* IXMLDOMDocument::createAttribute(
    BSTR name )
{
  struct IXMLDOMAttribute* _result;
  _com_dispatch_method( this, 0x2f, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMEntityReference* IXMLDOMDocument::createEntityReference(
    BSTR name )
{
  struct IXMLDOMEntityReference* _result;
  _com_dispatch_method( this, 0x31, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument::getElementsByTagName(
    BSTR tagName )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x32, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", tagName);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::createNode(
    VARIANT type,
    BSTR name,
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x36, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c\x0008\x0008", type, name, namespaceURI);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument::nodeFromID(
    BSTR idString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x38, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", idString);
  return _result;
}

inline boolean IXMLDOMDocument::load(
    VARIANT xmlSource )
{
  boolean _result;
  _com_dispatch_method( this, 0x3a, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000c", xmlSource);
  return _result;
}

inline long IXMLDOMDocument::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xfffffdf3, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMParseError* IXMLDOMDocument::GetparseError( )
{
  struct IXMLDOMParseError* _result;
  _com_dispatch_method( this, 0x3b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocument::Geturl( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x3c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline boolean IXMLDOMDocument::Getasync( )
{
  boolean _result;
  _com_dispatch_method( this, 0x3d, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument::Putasync(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x3d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline HRESULT IXMLDOMDocument::abort( )
{
  return _com_dispatch_method( this, 0x3e, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline boolean IXMLDOMDocument::loadXML(
    BSTR bstrXML )
{
  boolean _result;
  _com_dispatch_method( this, 0x3f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008", bstrXML);
  return _result;
}

inline HRESULT IXMLDOMDocument::save(
    VARIANT destination )
{
  return _com_dispatch_method( this, 0x40, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", destination );
}

inline boolean IXMLDOMDocument::GetvalidateOnParse( )
{
  boolean _result;
  _com_dispatch_method( this, 0x41, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument::PutvalidateOnParse(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x41, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IXMLDOMDocument::GetresolveExternals( )
{
  boolean _result;
  _com_dispatch_method( this, 0x42, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument::PutresolveExternals(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x42, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IXMLDOMDocument::GetpreserveWhiteSpace( )
{
  boolean _result;
  _com_dispatch_method( this, 0x43, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument::PutpreserveWhiteSpace(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x43, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline HRESULT IXMLDOMDocument::Putonreadystatechange(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x44, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline HRESULT IXMLDOMDocument::Putondataavailable(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x45, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline HRESULT IXMLDOMDocument::Putontransformnode(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x46, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

//
// Interface IXMLDOMDocumentType wrapper methods:
//

inline BSTR IXMLDOMDocumentType::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMDocumentType::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentType::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMDocumentType::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocumentType::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocumentType::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMDocumentType::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMDocumentType::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMDocumentType::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentType::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentType::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMDocumentType::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMDocumentType::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentType::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMDocumentType::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentType::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMDocumentType::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentType::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMDocumentType::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentType::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMDocumentType::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocumentType::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentType::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentType::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentType::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMDocumentType::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x83, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocumentType::Getentities( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0x84, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocumentType::Getnotations( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0x85, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXMLDOMElement wrapper methods:
//

inline BSTR IXMLDOMElement::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMElement::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMElement::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMElement::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMElement::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMElement::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMElement::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMElement::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMElement::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMElement::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMElement::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMElement::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMElement::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMElement::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMElement::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMElement::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMElement::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMElement::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMElement::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMElement::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMElement::GettagName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x61, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMElement::getAttribute(
    BSTR name )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x63, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", name);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMElement::setAttribute(
    BSTR name,
    VARIANT value )
{
  return _com_dispatch_method( this, 0x64, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", name, value );
}

inline HRESULT IXMLDOMElement::removeAttribute(
    BSTR name )
{
  return _com_dispatch_method( this, 0x65, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", name );
}

inline struct IXMLDOMAttribute* IXMLDOMElement::getAttributeNode(
    BSTR name )
{
  struct IXMLDOMAttribute* _result;
  _com_dispatch_method( this, 0x66, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMAttribute* IXMLDOMElement::setAttributeNode(
    struct IXMLDOMAttribute* DOMAttribute )
{
  struct IXMLDOMAttribute* _result;
  _com_dispatch_method( this, 0x67, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", DOMAttribute);
  return _result;
}

inline struct IXMLDOMAttribute* IXMLDOMElement::removeAttributeNode(
    struct IXMLDOMAttribute* DOMAttribute )
{
  struct IXMLDOMAttribute* _result;
  _com_dispatch_method( this, 0x68, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", DOMAttribute);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMElement::getElementsByTagName(
    BSTR tagName )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x69, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", tagName);
  return _result;
}

inline HRESULT IXMLDOMElement::normalize( )
{
  return _com_dispatch_method( this, 0x6a, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IXMLDOMAttribute wrapper methods:
//

inline BSTR IXMLDOMAttribute::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMAttribute::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMAttribute::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMAttribute::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMAttribute::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMAttribute::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMAttribute::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMAttribute::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMAttribute::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMAttribute::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMAttribute::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMAttribute::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMAttribute::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMAttribute::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMAttribute::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMAttribute::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMAttribute::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMAttribute::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMAttribute::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMAttribute::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMAttribute::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x76, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMAttribute::Getvalue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x78, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMAttribute::Putvalue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x78, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

//
// Interface IXMLDOMDocumentFragment wrapper methods:
//

inline BSTR IXMLDOMDocumentFragment::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMDocumentFragment::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentFragment::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMDocumentFragment::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocumentFragment::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocumentFragment::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMDocumentFragment::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMDocumentFragment::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMDocumentFragment::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentFragment::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentFragment::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMDocumentFragment::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMDocumentFragment::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentFragment::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMDocumentFragment::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentFragment::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMDocumentFragment::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentFragment::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMDocumentFragment::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocumentFragment::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMDocumentFragment::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocumentFragment::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentFragment::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocumentFragment::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocumentFragment::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

//
// Interface IXMLDOMText wrapper methods:
//

inline BSTR IXMLDOMText::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMText::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMText::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMText::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMText::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMText::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMText::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMText::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMText::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMText::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMText::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMText::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMText::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMText::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMText::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMText::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMText::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMText::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMText::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMText::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMText::Getdata( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6d, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::Putdata(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x6d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline long IXMLDOMText::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x6e, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMText::substringData(
    long offset,
    long count )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003\x0003", offset, count);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMText::appendData(
    BSTR data )
{
  return _com_dispatch_method( this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", data );
}

inline HRESULT IXMLDOMText::insertData(
    long offset,
    BSTR data )
{
  return _com_dispatch_method( this, 0x71, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", offset, data );
}

inline HRESULT IXMLDOMText::deleteData(
    long offset,
    long count )
{
  return _com_dispatch_method( this, 0x72, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003", offset, count );
}

inline HRESULT IXMLDOMText::replaceData(
    long offset,
    long count,
    BSTR data )
{
  return _com_dispatch_method( this, 0x73, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0008", offset, count, data );
}

inline struct IXMLDOMText* IXMLDOMText::splitText(
    long offset )
{
  struct IXMLDOMText* _result;
  _com_dispatch_method( this, 0x7b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", offset);
  return _result;
}

//
// Interface IXMLDOMCharacterData wrapper methods:
//

inline BSTR IXMLDOMCharacterData::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMCharacterData::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMCharacterData::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMCharacterData::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMCharacterData::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMCharacterData::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMCharacterData::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMCharacterData::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCharacterData::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMCharacterData::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMCharacterData::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMCharacterData::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMCharacterData::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCharacterData::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMCharacterData::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCharacterData::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMCharacterData::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMCharacterData::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCharacterData::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCharacterData::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMCharacterData::Getdata( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6d, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::Putdata(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x6d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline long IXMLDOMCharacterData::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x6e, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMCharacterData::substringData(
    long offset,
    long count )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003\x0003", offset, count);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCharacterData::appendData(
    BSTR data )
{
  return _com_dispatch_method( this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", data );
}

inline HRESULT IXMLDOMCharacterData::insertData(
    long offset,
    BSTR data )
{
  return _com_dispatch_method( this, 0x71, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", offset, data );
}

inline HRESULT IXMLDOMCharacterData::deleteData(
    long offset,
    long count )
{
  return _com_dispatch_method( this, 0x72, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003", offset, count );
}

inline HRESULT IXMLDOMCharacterData::replaceData(
    long offset,
    long count,
    BSTR data )
{
  return _com_dispatch_method( this, 0x73, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0008", offset, count, data );
}

//
// Interface IXMLDOMComment wrapper methods:
//

inline BSTR IXMLDOMComment::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMComment::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMComment::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMComment::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMComment::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMComment::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMComment::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMComment::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMComment::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMComment::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMComment::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMComment::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMComment::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMComment::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMComment::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMComment::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMComment::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMComment::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMComment::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMComment::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMComment::Getdata( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6d, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::Putdata(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x6d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline long IXMLDOMComment::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x6e, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMComment::substringData(
    long offset,
    long count )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003\x0003", offset, count);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMComment::appendData(
    BSTR data )
{
  return _com_dispatch_method( this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", data );
}

inline HRESULT IXMLDOMComment::insertData(
    long offset,
    BSTR data )
{
  return _com_dispatch_method( this, 0x71, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", offset, data );
}

inline HRESULT IXMLDOMComment::deleteData(
    long offset,
    long count )
{
  return _com_dispatch_method( this, 0x72, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003", offset, count );
}

inline HRESULT IXMLDOMComment::replaceData(
    long offset,
    long count,
    BSTR data )
{
  return _com_dispatch_method( this, 0x73, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0008", offset, count, data );
}

//
// Interface IXMLDOMCDATASection wrapper methods:
//

inline BSTR IXMLDOMCDATASection::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMCDATASection::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMCDATASection::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMCDATASection::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMCDATASection::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMCDATASection::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMCDATASection::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMCDATASection::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCDATASection::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMCDATASection::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMCDATASection::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMCDATASection::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMCDATASection::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCDATASection::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMCDATASection::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMCDATASection::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMCDATASection::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMCDATASection::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCDATASection::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMCDATASection::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMCDATASection::Getdata( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6d, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::Putdata(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x6d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline long IXMLDOMCDATASection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x6e, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMCDATASection::substringData(
    long offset,
    long count )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003\x0003", offset, count);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMCDATASection::appendData(
    BSTR data )
{
  return _com_dispatch_method( this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", data );
}

inline HRESULT IXMLDOMCDATASection::insertData(
    long offset,
    BSTR data )
{
  return _com_dispatch_method( this, 0x71, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", offset, data );
}

inline HRESULT IXMLDOMCDATASection::deleteData(
    long offset,
    long count )
{
  return _com_dispatch_method( this, 0x72, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003", offset, count );
}

inline HRESULT IXMLDOMCDATASection::replaceData(
    long offset,
    long count,
    BSTR data )
{
  return _com_dispatch_method( this, 0x73, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0008", offset, count, data );
}

inline struct IXMLDOMText* IXMLDOMCDATASection::splitText(
    long offset )
{
  struct IXMLDOMText* _result;
  _com_dispatch_method( this, 0x7b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", offset);
  return _result;
}

//
// Interface IXMLDOMProcessingInstruction wrapper methods:
//

inline BSTR IXMLDOMProcessingInstruction::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMProcessingInstruction::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMProcessingInstruction::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMProcessingInstruction::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMProcessingInstruction::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMProcessingInstruction::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMProcessingInstruction::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMProcessingInstruction::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMProcessingInstruction::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMProcessingInstruction::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMProcessingInstruction::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMProcessingInstruction::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMProcessingInstruction::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMProcessingInstruction::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMProcessingInstruction::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMProcessingInstruction::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMProcessingInstruction::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMProcessingInstruction::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMProcessingInstruction::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMProcessingInstruction::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline BSTR IXMLDOMProcessingInstruction::Gettarget( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x7f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMProcessingInstruction::Getdata( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x80, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMProcessingInstruction::Putdata(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x80, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

//
// Interface IXMLDOMEntityReference wrapper methods:
//

inline BSTR IXMLDOMEntityReference::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMEntityReference::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntityReference::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMEntityReference::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMEntityReference::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMEntityReference::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMEntityReference::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMEntityReference::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMEntityReference::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntityReference::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntityReference::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMEntityReference::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMEntityReference::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntityReference::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMEntityReference::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntityReference::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMEntityReference::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntityReference::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMEntityReference::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntityReference::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMEntityReference::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMEntityReference::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntityReference::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntityReference::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntityReference::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

//
// Interface IXMLDOMParseError wrapper methods:
//

inline long IXMLDOMParseError::GeterrorCode( )
{
  long _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMParseError::Geturl( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xb3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMParseError::Getreason( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xb4, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMParseError::GetsrcText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xb5, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline long IXMLDOMParseError::Getline( )
{
  long _result;
  _com_dispatch_method( this, 0xb6, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline long IXMLDOMParseError::Getlinepos( )
{
  long _result;
  _com_dispatch_method( this, 0xb7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline long IXMLDOMParseError::Getfilepos( )
{
  long _result;
  _com_dispatch_method( this, 0xb8, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXMLDOMDocument2 wrapper methods:
//

inline BSTR IXMLDOMDocument2::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMDocument2::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMDocument2::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument2::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMDocument2::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMDocument2::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMDocument2::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMDocument2::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument2::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMDocument2::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMDocument2::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMDocument2::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMDocument2::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument2::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument2::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMDocument2::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocument2::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument2::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMDocument2::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline struct IXMLDOMDocumentType* IXMLDOMDocument2::Getdoctype( )
{
  struct IXMLDOMDocumentType* _result;
  _com_dispatch_method( this, 0x26, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMImplementation* IXMLDOMDocument2::Getimplementation( )
{
  struct IXMLDOMImplementation* _result;
  _com_dispatch_method( this, 0x27, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMElement* IXMLDOMDocument2::GetdocumentElement( )
{
  struct IXMLDOMElement* _result;
  _com_dispatch_method( this, 0x28, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::PutRefdocumentElement(
    struct IXMLDOMElement* rhs )
{
  return _com_dispatch_method( this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IXMLDOMElement* IXMLDOMDocument2::createElement(
    BSTR tagName )
{
  struct IXMLDOMElement* _result;
  _com_dispatch_method( this, 0x29, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", tagName);
  return _result;
}

inline struct IXMLDOMDocumentFragment* IXMLDOMDocument2::createDocumentFragment( )
{
  struct IXMLDOMDocumentFragment* _result;
  _com_dispatch_method( this, 0x2a, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMText* IXMLDOMDocument2::createTextNode(
    BSTR data )
{
  struct IXMLDOMText* _result;
  _com_dispatch_method( this, 0x2b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMComment* IXMLDOMDocument2::createComment(
    BSTR data )
{
  struct IXMLDOMComment* _result;
  _com_dispatch_method( this, 0x2c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMCDATASection* IXMLDOMDocument2::createCDATASection(
    BSTR data )
{
  struct IXMLDOMCDATASection* _result;
  _com_dispatch_method( this, 0x2d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", data);
  return _result;
}

inline struct IXMLDOMProcessingInstruction* IXMLDOMDocument2::createProcessingInstruction(
    BSTR target,
    BSTR data )
{
  struct IXMLDOMProcessingInstruction* _result;
  _com_dispatch_method( this, 0x2e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008\x0008", target, data);
  return _result;
}

inline struct IXMLDOMAttribute* IXMLDOMDocument2::createAttribute(
    BSTR name )
{
  struct IXMLDOMAttribute* _result;
  _com_dispatch_method( this, 0x2f, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMEntityReference* IXMLDOMDocument2::createEntityReference(
    BSTR name )
{
  struct IXMLDOMEntityReference* _result;
  _com_dispatch_method( this, 0x31, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMDocument2::getElementsByTagName(
    BSTR tagName )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x32, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", tagName);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::createNode(
    VARIANT type,
    BSTR name,
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x36, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c\x0008\x0008", type, name, namespaceURI);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMDocument2::nodeFromID(
    BSTR idString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x38, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", idString);
  return _result;
}

inline boolean IXMLDOMDocument2::load(
    VARIANT xmlSource )
{
  boolean _result;
  _com_dispatch_method( this, 0x3a, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000c", xmlSource);
  return _result;
}

inline long IXMLDOMDocument2::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xfffffdf3, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMParseError* IXMLDOMDocument2::GetparseError( )
{
  struct IXMLDOMParseError* _result;
  _com_dispatch_method( this, 0x3b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMDocument2::Geturl( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x3c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline boolean IXMLDOMDocument2::Getasync( )
{
  boolean _result;
  _com_dispatch_method( this, 0x3d, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::Putasync(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x3d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline HRESULT IXMLDOMDocument2::abort( )
{
  return _com_dispatch_method( this, 0x3e, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline boolean IXMLDOMDocument2::loadXML(
    BSTR bstrXML )
{
  boolean _result;
  _com_dispatch_method( this, 0x3f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008", bstrXML);
  return _result;
}

inline HRESULT IXMLDOMDocument2::save(
    VARIANT destination )
{
  return _com_dispatch_method( this, 0x40, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", destination );
}

inline boolean IXMLDOMDocument2::GetvalidateOnParse( )
{
  boolean _result;
  _com_dispatch_method( this, 0x41, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::PutvalidateOnParse(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x41, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IXMLDOMDocument2::GetresolveExternals( )
{
  boolean _result;
  _com_dispatch_method( this, 0x42, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::PutresolveExternals(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x42, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IXMLDOMDocument2::GetpreserveWhiteSpace( )
{
  boolean _result;
  _com_dispatch_method( this, 0x43, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::PutpreserveWhiteSpace(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x43, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline HRESULT IXMLDOMDocument2::Putonreadystatechange(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x44, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline HRESULT IXMLDOMDocument2::Putondataavailable(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x45, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline HRESULT IXMLDOMDocument2::Putontransformnode(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x46, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline struct IXMLDOMSchemaCollection* IXMLDOMDocument2::Getnamespaces( )
{
  struct IXMLDOMSchemaCollection* _result;
  _com_dispatch_method( this, 0xc9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMDocument2::Getschemas( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xca, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMDocument2::PutRefschemas(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline struct IXMLDOMParseError* IXMLDOMDocument2::validate( )
{
  struct IXMLDOMParseError* _result;
  _com_dispatch_method( this, 0xcb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMDocument2::setProperty(
    BSTR name,
    VARIANT value )
{
  return _com_dispatch_method( this, 0xcc, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", name, value );
}

inline VARIANT IXMLDOMDocument2::getProperty(
    BSTR name )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xcd, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", name);
  return _variant_t( _result, false ) ;
}

//
// Interface IXMLDOMSchemaCollection wrapper methods:
//

inline HRESULT IXMLDOMSchemaCollection::add(
    BSTR namespaceURI,
    VARIANT var )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", namespaceURI, var );
}

inline struct IXMLDOMNode* IXMLDOMSchemaCollection::get(
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", namespaceURI);
  return _result;
}

inline HRESULT IXMLDOMSchemaCollection::remove(
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", namespaceURI );
}

inline long IXMLDOMSchemaCollection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x5, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMSchemaCollection::GetnamespaceURI(
    long index )
{
  BSTR _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", index);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMSchemaCollection::addCollection(
    struct IXMLDOMSchemaCollection* otherCollection )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", otherCollection );
}

//
// Interface IXMLDOMNotation wrapper methods:
//

inline BSTR IXMLDOMNotation::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMNotation::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNotation::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMNotation::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMNotation::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMNotation::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMNotation::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMNotation::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMNotation::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNotation::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMNotation::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMNotation::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMNotation::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNotation::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMNotation::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMNotation::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMNotation::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNotation::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMNotation::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMNotation::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMNotation::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMNotation::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNotation::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMNotation::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMNotation::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline VARIANT IXMLDOMNotation::GetpublicId( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x88, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT IXMLDOMNotation::GetsystemId( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x89, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

//
// Interface IXMLDOMEntity wrapper methods:
//

inline BSTR IXMLDOMEntity::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLDOMEntity::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntity::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXMLDOMEntity::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXMLDOMEntity::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXMLDOMEntity::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXMLDOMEntity::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXMLDOMEntity::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXMLDOMEntity::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntity::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntity::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXMLDOMEntity::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMEntity::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntity::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXMLDOMEntity::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntity::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDOMEntity::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntity::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXMLDOMEntity::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMEntity::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXMLDOMEntity::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMEntity::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntity::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDOMEntity::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMEntity::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline VARIANT IXMLDOMEntity::GetpublicId( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x8c, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT IXMLDOMEntity::GetsystemId( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x8d, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline BSTR IXMLDOMEntity::GetnotationName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x8e, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

//
// Interface IXTLRuntime wrapper methods:
//

inline BSTR IXTLRuntime::GetnodeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXTLRuntime::GetnodeValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXTLRuntime::PutnodeValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline DOMNodeType IXTLRuntime::GetnodeType( )
{
  DOMNodeType _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::GetparentNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNodeList* IXTLRuntime::GetchildNodes( )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::GetfirstChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::GetlastChild( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::GetpreviousSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::GetnextSibling( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNamedNodeMap* IXTLRuntime::Getattributes( )
{
  struct IXMLDOMNamedNodeMap* _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::insertBefore(
    struct IXMLDOMNode* newChild,
    VARIANT refChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x000c", newChild, refChild);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::replaceChild(
    struct IXMLDOMNode* newChild,
    struct IXMLDOMNode* oldChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c\x400c", newChild, oldChild);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::removeChild(
    struct IXMLDOMNode* childNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", childNode);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::appendChild(
    struct IXMLDOMNode* newChild )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", newChild);
  return _result;
}

inline boolean IXTLRuntime::hasChildNodes( )
{
  boolean _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMDocument* IXTLRuntime::GetownerDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x12, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::cloneNode(
    boolean deep )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x13, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000b", deep);
  return _result;
}

inline BSTR IXTLRuntime::GetnodeTypeString( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXTLRuntime::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline boolean IXTLRuntime::Getspecified( )
{
  boolean _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::Getdefinition( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXTLRuntime::GetnodeTypedValue( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXTLRuntime::PutnodeTypedValue(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXTLRuntime::GetdataType( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXTLRuntime::PutdataType(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXTLRuntime::Getxml( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::transformNode(
    struct IXMLDOMNode* stylesheet )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1c, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x400c", stylesheet);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLDOMNodeList* IXTLRuntime::selectNodes(
    BSTR queryString )
{
  struct IXMLDOMNodeList* _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline struct IXMLDOMNode* IXTLRuntime::selectSingleNode(
    BSTR queryString )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", queryString);
  return _result;
}

inline boolean IXTLRuntime::Getparsed( )
{
  boolean _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXTLRuntime::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::Getprefix( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::GetbaseName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXTLRuntime::transformNodeToObject(
    struct IXMLDOMNode* stylesheet,
    VARIANT outputObject )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000c", stylesheet, outputObject );
}

inline long IXTLRuntime::uniqueID(
    struct IXMLDOMNode* pNode )
{
  long _result;
  _com_dispatch_method( this, 0xbb, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x400c", pNode);
  return _result;
}

inline long IXTLRuntime::depth(
    struct IXMLDOMNode* pNode )
{
  long _result;
  _com_dispatch_method( this, 0xbc, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x400c", pNode);
  return _result;
}

inline long IXTLRuntime::childNumber(
    struct IXMLDOMNode* pNode )
{
  long _result;
  _com_dispatch_method( this, 0xbd, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x400c", pNode);
  return _result;
}

inline long IXTLRuntime::ancestorChildNumber(
    BSTR bstrNodeName,
    struct IXMLDOMNode* pNode )
{
  long _result;
  _com_dispatch_method( this, 0xbe, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x0008\x400c", bstrNodeName, pNode);
  return _result;
}

inline long IXTLRuntime::absoluteChildNumber(
    struct IXMLDOMNode* pNode )
{
  long _result;
  _com_dispatch_method( this, 0xbf, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x400c", pNode);
  return _result;
}

inline BSTR IXTLRuntime::formatIndex(
    long lIndex,
    BSTR bstrFormat )
{
  BSTR _result;
  _com_dispatch_method( this, 0xc0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003\x0008", lIndex, bstrFormat);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::formatNumber(
    double dblNumber,
    BSTR bstrFormat )
{
  BSTR _result;
  _com_dispatch_method( this, 0xc1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0005\x0008", dblNumber, bstrFormat);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::formatDate(
    VARIANT varDate,
    BSTR bstrFormat,
    VARIANT varDestLocale )
{
  BSTR _result;
  _com_dispatch_method( this, 0xc2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x000c\x0008\x000c", varDate, bstrFormat, varDestLocale);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXTLRuntime::formatTime(
    VARIANT varTime,
    BSTR bstrFormat,
    VARIANT varDestLocale )
{
  BSTR _result;
  _com_dispatch_method( this, 0xc3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x000c\x0008\x000c", varTime, bstrFormat, varDestLocale);
  return _bstr_t( _result, false ) ;
}

//
// Interface IXSLTemplate wrapper methods:
//

inline HRESULT IXSLTemplate::PutRefstylesheet(
    struct IXMLDOMNode* rhs )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IXMLDOMNode* IXSLTemplate::Getstylesheet( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXSLProcessor* IXSLTemplate::createProcessor( )
{
  struct IXSLProcessor* _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXSLProcessor wrapper methods:
//

inline HRESULT IXSLProcessor::Putinput(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXSLProcessor::Getinput( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct IXSLTemplate* IXSLProcessor::GetownerTemplate( )
{
  struct IXSLTemplate* _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXSLProcessor::setStartMode(
    BSTR mode,
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", mode, namespaceURI );
}

inline BSTR IXSLProcessor::GetstartMode( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXSLProcessor::GetstartModeURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXSLProcessor::Putoutput(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IXSLProcessor::Getoutput( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline boolean IXSLProcessor::transform( )
{
  boolean _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXSLProcessor::reset( )
{
  return _com_dispatch_method( this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline long IXSLProcessor::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXSLProcessor::addParameter(
    BSTR baseName,
    VARIANT parameter,
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c\x0008", baseName, parameter, namespaceURI );
}

inline HRESULT IXSLProcessor::addObject(
    IDispatch* obj,
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0009\x0008", obj, namespaceURI );
}

inline struct IXMLDOMNode* IXSLProcessor::Getstylesheet( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface IVBSAXXMLReader wrapper methods:
//

inline boolean IVBSAXXMLReader::getFeature(
    BSTR strName )
{
  boolean _result;
  _com_dispatch_method( this, 0x502, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008", strName);
  return _result;
}

inline HRESULT IVBSAXXMLReader::putFeature(
    BSTR strName,
    boolean fValue )
{
  return _com_dispatch_method( this, 0x503, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000b", strName, fValue );
}

inline VARIANT IVBSAXXMLReader::getProperty(
    BSTR strName )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x504, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", strName);
  return _variant_t( _result, false ) ;
}

inline HRESULT IVBSAXXMLReader::putProperty(
    BSTR strName,
    VARIANT varValue )
{
  return _com_dispatch_method( this, 0x505, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", strName, varValue );
}

inline struct IVBSAXEntityResolver* IVBSAXXMLReader::GetentityResolver( )
{
  struct IVBSAXEntityResolver* _result;
  _com_dispatch_method( this, 0x506, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBSAXXMLReader::PutRefentityResolver(
    struct IVBSAXEntityResolver* rhs )
{
  return _com_dispatch_method( this, 0x506, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IVBSAXContentHandler* IVBSAXXMLReader::GetcontentHandler( )
{
  struct IVBSAXContentHandler* _result;
  _com_dispatch_method( this, 0x507, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBSAXXMLReader::PutRefcontentHandler(
    struct IVBSAXContentHandler* rhs )
{
  return _com_dispatch_method( this, 0x507, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IVBSAXDTDHandler* IVBSAXXMLReader::GetdtdHandler( )
{
  struct IVBSAXDTDHandler* _result;
  _com_dispatch_method( this, 0x508, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBSAXXMLReader::PutRefdtdHandler(
    struct IVBSAXDTDHandler* rhs )
{
  return _com_dispatch_method( this, 0x508, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IVBSAXErrorHandler* IVBSAXXMLReader::GeterrorHandler( )
{
  struct IVBSAXErrorHandler* _result;
  _com_dispatch_method( this, 0x509, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBSAXXMLReader::PutReferrorHandler(
    struct IVBSAXErrorHandler* rhs )
{
  return _com_dispatch_method( this, 0x509, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline BSTR IVBSAXXMLReader::GetbaseURL( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x50a, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IVBSAXXMLReader::PutbaseURL(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x50a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IVBSAXXMLReader::GetsecureBaseURL( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x50b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IVBSAXXMLReader::PutsecureBaseURL(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x50b, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline HRESULT IVBSAXXMLReader::parse(
    VARIANT varInput )
{
  return _com_dispatch_method( this, 0x50c, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", varInput );
}

inline HRESULT IVBSAXXMLReader::parseURL(
    BSTR strURL )
{
  return _com_dispatch_method( this, 0x50d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", strURL );
}

//
// Interface IVBSAXEntityResolver wrapper methods:
//

inline VARIANT IVBSAXEntityResolver::resolveEntity(
    BSTR* strPublicId,
    BSTR* strSystemId )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x527, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x4008\x4008", strPublicId, strSystemId);
  return _variant_t( _result, false ) ;
}

//
// Interface IVBSAXContentHandler wrapper methods:
//

inline HRESULT IVBSAXContentHandler::PutRefdocumentLocator(
    struct IVBSAXLocator* rhs )
{
  return _com_dispatch_method( this, 0x52a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline HRESULT IVBSAXContentHandler::startDocument( )
{
  return _com_dispatch_method( this, 0x52b, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBSAXContentHandler::endDocument( )
{
  return _com_dispatch_method( this, 0x52c, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBSAXContentHandler::startPrefixMapping(
    BSTR* strPrefix,
    BSTR* strURI )
{
  return _com_dispatch_method( this, 0x52d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008", strPrefix, strURI );
}

inline HRESULT IVBSAXContentHandler::endPrefixMapping(
    BSTR* strPrefix )
{
  return _com_dispatch_method( this, 0x52e, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strPrefix );
}

inline HRESULT IVBSAXContentHandler::startElement(
    BSTR* strNamespaceURI,
    BSTR* strLocalName,
    BSTR* strQName,
    struct IVBSAXAttributes* oAttributes )
{
  return _com_dispatch_method( this, 0x52f, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008\x400c", strNamespaceURI, strLocalName, strQName, oAttributes );
}

inline HRESULT IVBSAXContentHandler::endElement(
    BSTR* strNamespaceURI,
    BSTR* strLocalName,
    BSTR* strQName )
{
  return _com_dispatch_method( this, 0x530, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008", strNamespaceURI, strLocalName, strQName );
}

inline HRESULT IVBSAXContentHandler::characters(
    BSTR* strChars )
{
  return _com_dispatch_method( this, 0x531, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strChars );
}

inline HRESULT IVBSAXContentHandler::ignorableWhitespace(
    BSTR* strChars )
{
  return _com_dispatch_method( this, 0x532, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strChars );
}

inline HRESULT IVBSAXContentHandler::processingInstruction(
    BSTR* strTarget,
    BSTR* strData )
{
  return _com_dispatch_method( this, 0x533, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008", strTarget, strData );
}

inline HRESULT IVBSAXContentHandler::skippedEntity(
    BSTR* strName )
{
  return _com_dispatch_method( this, 0x534, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strName );
}

//
// Interface IVBSAXLocator wrapper methods:
//

inline int IVBSAXLocator::GetcolumnNumber( )
{
  int _result;
  _com_dispatch_method( this, 0x521, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline int IVBSAXLocator::GetlineNumber( )
{
  int _result;
  _com_dispatch_method( this, 0x522, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IVBSAXLocator::GetpublicId( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x523, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXLocator::GetsystemId( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x524, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

//
// Interface IVBSAXAttributes wrapper methods:
//

inline int IVBSAXAttributes::Getlength( )
{
  int _result;
  _com_dispatch_method( this, 0x540, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IVBSAXAttributes::getURI(
    int nIndex )
{
  BSTR _result;
  _com_dispatch_method( this, 0x541, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", nIndex);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getLocalName(
    int nIndex )
{
  BSTR _result;
  _com_dispatch_method( this, 0x542, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", nIndex);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getQName(
    int nIndex )
{
  BSTR _result;
  _com_dispatch_method( this, 0x543, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", nIndex);
  return _bstr_t( _result, false ) ;
}

inline int IVBSAXAttributes::getIndexFromName(
    BSTR strURI,
    BSTR strLocalName )
{
  int _result;
  _com_dispatch_method( this, 0x544, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x0008\x0008", strURI, strLocalName);
  return _result;
}

inline int IVBSAXAttributes::getIndexFromQName(
    BSTR strQName )
{
  int _result;
  _com_dispatch_method( this, 0x545, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x0008", strQName);
  return _result;
}

inline BSTR IVBSAXAttributes::getType(
    int nIndex )
{
  BSTR _result;
  _com_dispatch_method( this, 0x546, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", nIndex);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getTypeFromName(
    BSTR strURI,
    BSTR strLocalName )
{
  BSTR _result;
  _com_dispatch_method( this, 0x547, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008\x0008", strURI, strLocalName);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getTypeFromQName(
    BSTR strQName )
{
  BSTR _result;
  _com_dispatch_method( this, 0x548, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", strQName);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getValue(
    int nIndex )
{
  BSTR _result;
  _com_dispatch_method( this, 0x549, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", nIndex);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getValueFromName(
    BSTR strURI,
    BSTR strLocalName )
{
  BSTR _result;
  _com_dispatch_method( this, 0x54a, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008\x0008", strURI, strLocalName);
  return _bstr_t( _result, false ) ;
}

inline BSTR IVBSAXAttributes::getValueFromQName(
    BSTR strQName )
{
  BSTR _result;
  _com_dispatch_method( this, 0x54b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", strQName);
  return _bstr_t( _result, false ) ;
}

//
// Interface IVBSAXDTDHandler wrapper methods:
//

inline HRESULT IVBSAXDTDHandler::notationDecl(
    BSTR* strName,
    BSTR* strPublicId,
    BSTR* strSystemId )
{
  return _com_dispatch_method( this, 0x537, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008", strName, strPublicId, strSystemId );
}

inline HRESULT IVBSAXDTDHandler::unparsedEntityDecl(
    BSTR* strName,
    BSTR* strPublicId,
    BSTR* strSystemId,
    BSTR* strNotationName )
{
  return _com_dispatch_method( this, 0x538, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008\x4008", strName, strPublicId, strSystemId, strNotationName );
}

//
// Interface IVBSAXErrorHandler wrapper methods:
//

inline HRESULT IVBSAXErrorHandler::error(
    struct IVBSAXLocator* oLocator,
    BSTR* strErrorMessage,
    long nErrorCode )
{
  return _com_dispatch_method( this, 0x53b, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x4008\x0003", oLocator, strErrorMessage, nErrorCode );
}

inline HRESULT IVBSAXErrorHandler::fatalError(
    struct IVBSAXLocator* oLocator,
    BSTR* strErrorMessage,
    long nErrorCode )
{
  return _com_dispatch_method( this, 0x53c, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x4008\x0003", oLocator, strErrorMessage, nErrorCode );
}

inline HRESULT IVBSAXErrorHandler::ignorableWarning(
    struct IVBSAXLocator* oLocator,
    BSTR* strErrorMessage,
    long nErrorCode )
{
  return _com_dispatch_method( this, 0x53d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x4008\x0003", oLocator, strErrorMessage, nErrorCode );
}

//
// Interface IVBSAXXMLFilter wrapper methods:
//

inline struct IVBSAXXMLReader* IVBSAXXMLFilter::Getparent( )
{
  struct IVBSAXXMLReader* _result;
  _com_dispatch_method( this, 0x51d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBSAXXMLFilter::PutRefparent(
    struct IVBSAXXMLReader* rhs )
{
  return _com_dispatch_method( this, 0x51d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

//
// Interface IVBSAXLexicalHandler wrapper methods:
//

inline HRESULT IVBSAXLexicalHandler::startDTD(
    BSTR* strName,
    BSTR* strPublicId,
    BSTR* strSystemId )
{
  return _com_dispatch_method( this, 0x54e, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008", strName, strPublicId, strSystemId );
}

inline HRESULT IVBSAXLexicalHandler::endDTD( )
{
  return _com_dispatch_method( this, 0x54f, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBSAXLexicalHandler::startEntity(
    BSTR* strName )
{
  return _com_dispatch_method( this, 0x550, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strName );
}

inline HRESULT IVBSAXLexicalHandler::endEntity(
    BSTR* strName )
{
  return _com_dispatch_method( this, 0x551, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strName );
}

inline HRESULT IVBSAXLexicalHandler::startCDATA( )
{
  return _com_dispatch_method( this, 0x552, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBSAXLexicalHandler::endCDATA( )
{
  return _com_dispatch_method( this, 0x553, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBSAXLexicalHandler::comment(
    BSTR* strChars )
{
  return _com_dispatch_method( this, 0x554, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008", strChars );
}

//
// Interface IVBSAXDeclHandler wrapper methods:
//

inline HRESULT IVBSAXDeclHandler::elementDecl(
    BSTR* strName,
    BSTR* strModel )
{
  return _com_dispatch_method( this, 0x557, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008", strName, strModel );
}

inline HRESULT IVBSAXDeclHandler::attributeDecl(
    BSTR* strElementName,
    BSTR* strAttributeName,
    BSTR* strType,
    BSTR* strValueDefault,
    BSTR* strValue )
{
  return _com_dispatch_method( this, 0x558, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008\x4008\x4008", strElementName, strAttributeName, strType, strValueDefault, strValue );
}

inline HRESULT IVBSAXDeclHandler::internalEntityDecl(
    BSTR* strName,
    BSTR* strValue )
{
  return _com_dispatch_method( this, 0x559, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008", strName, strValue );
}

inline HRESULT IVBSAXDeclHandler::externalEntityDecl(
    BSTR* strName,
    BSTR* strPublicId,
    BSTR* strSystemId )
{
  return _com_dispatch_method( this, 0x55a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4008\x4008\x4008", strName, strPublicId, strSystemId );
}

//
// Interface IMXWriter wrapper methods:
//

inline HRESULT IMXWriter::Putoutput(
    VARIANT rhs )
{
  return _com_dispatch_method( this, 0x569, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", rhs );
}

inline VARIANT IMXWriter::Getoutput( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x569, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline HRESULT IMXWriter::Putencoding(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x56b, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IMXWriter::Getencoding( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x56b, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IMXWriter::PutbyteOrderMark(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x56c, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IMXWriter::GetbyteOrderMark( )
{
  boolean _result;
  _com_dispatch_method( this, 0x56c, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMXWriter::Putindent(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x56d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IMXWriter::Getindent( )
{
  boolean _result;
  _com_dispatch_method( this, 0x56d, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMXWriter::Putstandalone(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x56e, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IMXWriter::Getstandalone( )
{
  boolean _result;
  _com_dispatch_method( this, 0x56e, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMXWriter::PutomitXMLDeclaration(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x56f, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IMXWriter::GetomitXMLDeclaration( )
{
  boolean _result;
  _com_dispatch_method( this, 0x56f, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMXWriter::Putversion(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x570, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IMXWriter::Getversion( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x570, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IMXWriter::PutdisableOutputEscaping(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x571, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IMXWriter::GetdisableOutputEscaping( )
{
  boolean _result;
  _com_dispatch_method( this, 0x571, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMXWriter::flush( )
{
  return _com_dispatch_method( this, 0x572, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IMXAttributes wrapper methods:
//

inline HRESULT IMXAttributes::addAttribute(
    BSTR strURI,
    BSTR strLocalName,
    BSTR strQName,
    BSTR strType,
    BSTR strValue )
{
  return _com_dispatch_method( this, 0x55d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008\x0008\x0008\x0008", strURI, strLocalName, strQName, strType, strValue );
}

inline HRESULT IMXAttributes::addAttributeFromIndex(
    VARIANT varAtts,
    int nIndex )
{
  return _com_dispatch_method( this, 0x567, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c\x0003", varAtts, nIndex );
}

inline HRESULT IMXAttributes::clear( )
{
  return _com_dispatch_method( this, 0x55e, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IMXAttributes::removeAttribute(
    int nIndex )
{
  return _com_dispatch_method( this, 0x55f, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", nIndex );
}

inline HRESULT IMXAttributes::setAttribute(
    int nIndex,
    BSTR strURI,
    BSTR strLocalName,
    BSTR strQName,
    BSTR strType,
    BSTR strValue )
{
  return _com_dispatch_method( this, 0x560, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008\x0008\x0008\x0008\x0008", nIndex, strURI, strLocalName, strQName, strType, strValue );
}

inline HRESULT IMXAttributes::setAttributes(
    VARIANT varAtts )
{
  return _com_dispatch_method( this, 0x561, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", varAtts );
}

inline HRESULT IMXAttributes::setLocalName(
    int nIndex,
    BSTR strLocalName )
{
  return _com_dispatch_method( this, 0x562, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", nIndex, strLocalName );
}

inline HRESULT IMXAttributes::setQName(
    int nIndex,
    BSTR strQName )
{
  return _com_dispatch_method( this, 0x563, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", nIndex, strQName );
}

inline HRESULT IMXAttributes::setType(
    int nIndex,
    BSTR strType )
{
  return _com_dispatch_method( this, 0x564, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", nIndex, strType );
}

inline HRESULT IMXAttributes::setURI(
    int nIndex,
    BSTR strURI )
{
  return _com_dispatch_method( this, 0x565, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", nIndex, strURI );
}

inline HRESULT IMXAttributes::setValue(
    int nIndex,
    BSTR strValue )
{
  return _com_dispatch_method( this, 0x566, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", nIndex, strValue );
}

//
// Interface IMXReaderControl wrapper methods:
//

inline HRESULT IMXReaderControl::abort( )
{
  return _com_dispatch_method( this, 0x576, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IMXReaderControl::resume( )
{
  return _com_dispatch_method( this, 0x577, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IMXReaderControl::suspend( )
{
  return _com_dispatch_method( this, 0x578, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IMXSchemaDeclHandler wrapper methods:
//

inline HRESULT IMXSchemaDeclHandler::schemaElementDecl(
    struct ISchemaElement* oSchemaElement )
{
  return _com_dispatch_method( this, 0x57b, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", oSchemaElement );
}

//
// Interface ISchemaElement wrapper methods:
//

inline BSTR ISchemaElement::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaElement::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaElement::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaElement::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaElement::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaElement::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaElement::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline VARIANT ISchemaElement::GetminOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5af, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaElement::GetmaxOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ab, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct ISchemaType* ISchemaElement::Gettype( )
{
  struct ISchemaType* _result;
  _com_dispatch_method( this, 0x5c4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaComplexType* ISchemaElement::Getscope( )
{
  struct ISchemaComplexType* _result;
  _com_dispatch_method( this, 0x5bd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaElement::GetdefaultValue( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x597, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaElement::GetfixedValue( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x59e, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline boolean ISchemaElement::GetisNillable( )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a3, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchemaElement::GetidentityConstraints( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x5a1, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaElement* ISchemaElement::GetsubstitutionGroup( )
{
  struct ISchemaElement* _result;
  _com_dispatch_method( this, 0x5bf, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaElement::GetsubstitutionGroupExclusions( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x5c0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaElement::GetdisallowedSubstitutions( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x599, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaElement::GetisAbstract( )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a2, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaElement::GetisReference( )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a4, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaParticle wrapper methods:
//

inline BSTR ISchemaParticle::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaParticle::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaParticle::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaParticle::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaParticle::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaParticle::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaParticle::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline VARIANT ISchemaParticle::GetminOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5af, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaParticle::GetmaxOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ab, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

//
// Interface ISchemaItem wrapper methods:
//

inline BSTR ISchemaItem::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaItem::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaItem::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaItem::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaItem::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaItem::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaItem::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

//
// Interface ISchema wrapper methods:
//

inline BSTR ISchema::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchema::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchema::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchema::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchema::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchema::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchema::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline BSTR ISchema::GettargetNamespace( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5c2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchema::Getversion( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5c9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchemaItemCollection* ISchema::Gettypes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x5c5, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchema::Getelements( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x59a, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchema::Getattributes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x593, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchema::GetattributeGroups( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x592, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchema::GetmodelGroups( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x5b0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchema::Getnotations( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x5b4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaStringCollection* ISchema::GetschemaLocations( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x5bc, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaItemCollection wrapper methods:
//

inline struct ISchemaItem* ISchemaItemCollection::Getitem(
    long index )
{
  struct ISchemaItem* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", index);
  return _result;
}

inline struct ISchemaItem* ISchemaItemCollection::itemByName(
    BSTR name )
{
  struct ISchemaItem* _result;
  _com_dispatch_method( this, 0x58f, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", name);
  return _result;
}

inline struct ISchemaItem* ISchemaItemCollection::itemByQName(
    BSTR name,
    BSTR namespaceURI )
{
  struct ISchemaItem* _result;
  _com_dispatch_method( this, 0x590, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008\x0008", name, namespaceURI);
  return _result;
}

inline long ISchemaItemCollection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x5a7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaStringCollection wrapper methods:
//

inline BSTR ISchemaStringCollection::Getitem(
    long index )
{
  BSTR _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", index);
  return _bstr_t( _result, false ) ;
}

inline long ISchemaStringCollection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x5a7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaType wrapper methods:
//

inline BSTR ISchemaType::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaType::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaType::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaType::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaType::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaType::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaType::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline struct ISchemaItemCollection* ISchemaType::GetbaseTypes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x594, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaType::Getfinal( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x59d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMATYPEVARIETY ISchemaType::Getvariety( )
{
  SCHEMATYPEVARIETY _result;
  _com_dispatch_method( this, 0x5c8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaType::GetderivedBy( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x598, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaType::isValid(
    BSTR data )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a5, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008", data);
  return _result;
}

inline BSTR ISchemaType::GetminExclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5ac, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaType::GetminInclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5ad, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaType::GetmaxExclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a8, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaType::GetmaxInclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT ISchemaType::GettotalDigits( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5c3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaType::GetfractionDigits( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x59f, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaType::Getlength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5a7, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaType::GetminLength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ae, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaType::GetmaxLength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5aa, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct ISchemaStringCollection* ISchemaType::Getenumeration( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x59b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMAWHITESPACE ISchemaType::Getwhitespace( )
{
  SCHEMAWHITESPACE _result;
  _com_dispatch_method( this, 0x5ca, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaStringCollection* ISchemaType::Getpatterns( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x5b6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaComplexType wrapper methods:
//

inline BSTR ISchemaComplexType::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaComplexType::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaComplexType::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaComplexType::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaComplexType::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaComplexType::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaComplexType::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline struct ISchemaItemCollection* ISchemaComplexType::GetbaseTypes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x594, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaComplexType::Getfinal( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x59d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMATYPEVARIETY ISchemaComplexType::Getvariety( )
{
  SCHEMATYPEVARIETY _result;
  _com_dispatch_method( this, 0x5c8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaComplexType::GetderivedBy( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x598, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaComplexType::isValid(
    BSTR data )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a5, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x0008", data);
  return _result;
}

inline BSTR ISchemaComplexType::GetminExclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5ac, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaComplexType::GetminInclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5ad, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaComplexType::GetmaxExclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a8, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaComplexType::GetmaxInclusive( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT ISchemaComplexType::GettotalDigits( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5c3, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaComplexType::GetfractionDigits( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x59f, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaComplexType::Getlength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5a7, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaComplexType::GetminLength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ae, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaComplexType::GetmaxLength( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5aa, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct ISchemaStringCollection* ISchemaComplexType::Getenumeration( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x59b, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMAWHITESPACE ISchemaComplexType::Getwhitespace( )
{
  SCHEMAWHITESPACE _result;
  _com_dispatch_method( this, 0x5ca, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaStringCollection* ISchemaComplexType::Getpatterns( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x5b6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaComplexType::GetisAbstract( )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a2, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaAny* ISchemaComplexType::GetanyAttribute( )
{
  struct ISchemaAny* _result;
  _com_dispatch_method( this, 0x591, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchemaComplexType::Getattributes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x593, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMACONTENTTYPE ISchemaComplexType::GetcontentType( )
{
  SCHEMACONTENTTYPE _result;
  _com_dispatch_method( this, 0x596, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaModelGroup* ISchemaComplexType::GetcontentModel( )
{
  struct ISchemaModelGroup* _result;
  _com_dispatch_method( this, 0x595, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMADERIVATIONMETHOD ISchemaComplexType::GetprohibitedSubstitutions( )
{
  SCHEMADERIVATIONMETHOD _result;
  _com_dispatch_method( this, 0x5b8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaAny wrapper methods:
//

inline BSTR ISchemaAny::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaAny::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaAny::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaAny::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaAny::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaAny::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaAny::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline VARIANT ISchemaAny::GetminOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5af, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaAny::GetmaxOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ab, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct ISchemaStringCollection* ISchemaAny::Getnamespaces( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x5b2, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline SCHEMAPROCESSCONTENTS ISchemaAny::GetprocessContents( )
{
  SCHEMAPROCESSCONTENTS _result;
  _com_dispatch_method( this, 0x5b7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaModelGroup wrapper methods:
//

inline BSTR ISchemaModelGroup::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaModelGroup::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaModelGroup::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaModelGroup::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaModelGroup::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaModelGroup::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaModelGroup::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline VARIANT ISchemaModelGroup::GetminOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5af, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT ISchemaModelGroup::GetmaxOccurs( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x5ab, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline struct ISchemaItemCollection* ISchemaModelGroup::Getparticles( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x5b5, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXMLDOMSchemaCollection2 wrapper methods:
//

inline HRESULT IXMLDOMSchemaCollection2::add(
    BSTR namespaceURI,
    VARIANT var )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", namespaceURI, var );
}

inline struct IXMLDOMNode* IXMLDOMSchemaCollection2::get(
    BSTR namespaceURI )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", namespaceURI);
  return _result;
}

inline HRESULT IXMLDOMSchemaCollection2::remove(
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", namespaceURI );
}

inline long IXMLDOMSchemaCollection2::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x5, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDOMSchemaCollection2::GetnamespaceURI(
    long index )
{
  BSTR _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", index);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMSchemaCollection2::addCollection(
    struct IXMLDOMSchemaCollection* otherCollection )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", otherCollection );
}

inline HRESULT IXMLDOMSchemaCollection2::validate( )
{
  return _com_dispatch_method( this, 0x58b, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IXMLDOMSchemaCollection2::PutvalidateOnLoad(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x58c, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IXMLDOMSchemaCollection2::GetvalidateOnLoad( )
{
  boolean _result;
  _com_dispatch_method( this, 0x58c, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline struct ISchema* IXMLDOMSchemaCollection2::getSchema(
    BSTR namespaceURI )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x58d, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", namespaceURI);
  return _result;
}

inline struct ISchemaItem* IXMLDOMSchemaCollection2::getDeclaration(
    struct IXMLDOMNode* node )
{
  struct ISchemaItem* _result;
  _com_dispatch_method( this, 0x58e, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", node);
  return _result;
}

//
// Interface ISchemaAttribute wrapper methods:
//

inline BSTR ISchemaAttribute::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaAttribute::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaAttribute::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaAttribute::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaAttribute::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaAttribute::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaAttribute::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline struct ISchemaType* ISchemaAttribute::Gettype( )
{
  struct ISchemaType* _result;
  _com_dispatch_method( this, 0x5c4, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaComplexType* ISchemaAttribute::Getscope( )
{
  struct ISchemaComplexType* _result;
  _com_dispatch_method( this, 0x5bd, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaAttribute::GetdefaultValue( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x597, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaAttribute::GetfixedValue( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x59e, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SCHEMAUSE ISchemaAttribute::Getuse( )
{
  SCHEMAUSE _result;
  _com_dispatch_method( this, 0x5c7, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaAttribute::GetisReference( )
{
  boolean _result;
  _com_dispatch_method( this, 0x5a4, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaAttributeGroup wrapper methods:
//

inline BSTR ISchemaAttributeGroup::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaAttributeGroup::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaAttributeGroup::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaAttributeGroup::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaAttributeGroup::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaAttributeGroup::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaAttributeGroup::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline struct ISchemaAny* ISchemaAttributeGroup::GetanyAttribute( )
{
  struct ISchemaAny* _result;
  _com_dispatch_method( this, 0x591, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaItemCollection* ISchemaAttributeGroup::Getattributes( )
{
  struct ISchemaItemCollection* _result;
  _com_dispatch_method( this, 0x593, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaIdentityConstraint wrapper methods:
//

inline BSTR ISchemaIdentityConstraint::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaIdentityConstraint::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaIdentityConstraint::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaIdentityConstraint::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaIdentityConstraint::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaIdentityConstraint::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaIdentityConstraint::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline BSTR ISchemaIdentityConstraint::Getselector( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5be, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchemaStringCollection* ISchemaIdentityConstraint::Getfields( )
{
  struct ISchemaStringCollection* _result;
  _com_dispatch_method( this, 0x59c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct ISchemaIdentityConstraint* ISchemaIdentityConstraint::GetreferencedKey( )
{
  struct ISchemaIdentityConstraint* _result;
  _com_dispatch_method( this, 0x5ba, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ISchemaNotation wrapper methods:
//

inline BSTR ISchemaNotation::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaNotation::GetnamespaceURI( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct ISchema* ISchemaNotation::Getschema( )
{
  struct ISchema* _result;
  _com_dispatch_method( this, 0x5bb, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ISchemaNotation::Getid( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5a0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline SOMITEMTYPE ISchemaNotation::GetitemType( )
{
  SOMITEMTYPE _result;
  _com_dispatch_method( this, 0x5a6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IVBSAXAttributes* ISchemaNotation::GetunhandledAttributes( )
{
  struct IVBSAXAttributes* _result;
  _com_dispatch_method( this, 0x5c6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline boolean ISchemaNotation::writeAnnotation(
    IUnknown* annotationSink )
{
  boolean _result;
  _com_dispatch_method( this, 0x5cb, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000d", annotationSink);
  return _result;
}

inline BSTR ISchemaNotation::GetsystemIdentifier( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5c1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ISchemaNotation::GetpublicIdentifier( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x5b9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

//
// Interface IXMLElementCollection wrapper methods:
//

inline long IXMLElementCollection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x10001, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline IDispatch* IXMLElementCollection::item(
    VARIANT var1,
    VARIANT var2 )
{
  IDispatch* _result;
  _com_dispatch_method( this, 0x10003, DISPATCH_METHOD , VT_DISPATCH, (void*)&_result, L"\x000c\x000c", var1, var2);
  return _result;
}

//
// Interface IXMLDocument wrapper methods:
//

inline struct IXMLElement* IXMLDocument::Getroot( )
{
  struct IXMLElement* _result;
  _com_dispatch_method( this, 0x10065, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDocument::Geturl( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x10069, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDocument::Puturl(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x10069, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline long IXMLDocument::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0x1006b, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLDocument::Getcharset( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1006d, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDocument::Putcharset(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x1006d, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IXMLDocument::Getversion( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1006e, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLDocument::Getdoctype( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1006f, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline struct IXMLElement* IXMLDocument::createElement(
    VARIANT vType,
    VARIANT var1 )
{
  struct IXMLElement* _result;
  _com_dispatch_method( this, 0x1006c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c\x000c", vType, var1);
  return _result;
}

//
// Interface IXMLElement wrapper methods:
//

inline BSTR IXMLElement::GettagName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x100c9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLElement::PuttagName(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x100c9, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline struct IXMLElement* IXMLElement::Getparent( )
{
  struct IXMLElement* _result;
  _com_dispatch_method( this, 0x100ca, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLElement::setAttribute(
    BSTR strPropertyName,
    VARIANT PropertyValue )
{
  return _com_dispatch_method( this, 0x100cb, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", strPropertyName, PropertyValue );
}

inline VARIANT IXMLElement::getAttribute(
    BSTR strPropertyName )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x100cc, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", strPropertyName);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLElement::removeAttribute(
    BSTR strPropertyName )
{
  return _com_dispatch_method( this, 0x100cd, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", strPropertyName );
}

inline struct IXMLElementCollection* IXMLElement::Getchildren( )
{
  struct IXMLElementCollection* _result;
  _com_dispatch_method( this, 0x100ce, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline long IXMLElement::Gettype( )
{
  long _result;
  _com_dispatch_method( this, 0x100cf, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLElement::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x100d0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLElement::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x100d0, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline HRESULT IXMLElement::addChild(
    struct IXMLElement* pChildElem,
    long lIndex,
    long lReserved )
{
  return _com_dispatch_method( this, 0x100d1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x0003\x0003", pChildElem, lIndex, lReserved );
}

inline HRESULT IXMLElement::removeChild(
    struct IXMLElement* pChildElem )
{
  return _com_dispatch_method( this, 0x100d2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", pChildElem );
}

//
// Interface IXMLElement2 wrapper methods:
//

inline BSTR IXMLElement2::GettagName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x100c9, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLElement2::PuttagName(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x100c9, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline struct IXMLElement2* IXMLElement2::Getparent( )
{
  struct IXMLElement2* _result;
  _com_dispatch_method( this, 0x100ca, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLElement2::setAttribute(
    BSTR strPropertyName,
    VARIANT PropertyValue )
{
  return _com_dispatch_method( this, 0x100cb, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", strPropertyName, PropertyValue );
}

inline VARIANT IXMLElement2::getAttribute(
    BSTR strPropertyName )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x100cc, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", strPropertyName);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLElement2::removeAttribute(
    BSTR strPropertyName )
{
  return _com_dispatch_method( this, 0x100cd, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", strPropertyName );
}

inline struct IXMLElementCollection* IXMLElement2::Getchildren( )
{
  struct IXMLElementCollection* _result;
  _com_dispatch_method( this, 0x100ce, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline long IXMLElement2::Gettype( )
{
  long _result;
  _com_dispatch_method( this, 0x100cf, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLElement2::Gettext( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x100d0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLElement2::Puttext(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x100d0, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline HRESULT IXMLElement2::addChild(
    struct IXMLElement2* pChildElem,
    long lIndex,
    long lReserved )
{
  return _com_dispatch_method( this, 0x100d1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x0003\x0003", pChildElem, lIndex, lReserved );
}

inline HRESULT IXMLElement2::removeChild(
    struct IXMLElement2* pChildElem )
{
  return _com_dispatch_method( this, 0x100d2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", pChildElem );
}

inline struct IXMLElementCollection* IXMLElement2::Getattributes( )
{
  struct IXMLElementCollection* _result;
  _com_dispatch_method( this, 0x100d3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXMLAttribute wrapper methods:
//

inline BSTR IXMLAttribute::Getname( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x10191, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLAttribute::Getvalue( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x10192, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

//
// Interface IXMLDOMSelection wrapper methods:
//

inline struct IXMLDOMNode* IXMLDOMSelection::Getitem(
    long index )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", index);
  return _result;
}

inline long IXMLDOMSelection::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x4a, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMSelection::nextNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x4c, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMSelection::reset( )
{
  return _com_dispatch_method( this, 0x4d, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline BSTR IXMLDOMSelection::Getexpr( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x51, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLDOMSelection::Putexpr(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x51, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline struct IXMLDOMNode* IXMLDOMSelection::Getcontext( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x52, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMSelection::PutRefcontext(
    struct IXMLDOMNode* rhs )
{
  return _com_dispatch_method( this, 0x52, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline struct IXMLDOMNode* IXMLDOMSelection::peekNode( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x53, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMSelection::matches(
    struct IXMLDOMNode* pNode )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x54, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x400c", pNode);
  return _result;
}

inline struct IXMLDOMNode* IXMLDOMSelection::removeNext( )
{
  struct IXMLDOMNode* _result;
  _com_dispatch_method( this, 0x55, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLDOMSelection::removeAll( )
{
  return _com_dispatch_method( this, 0x56, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline struct IXMLDOMSelection* IXMLDOMSelection::clone( )
{
  struct IXMLDOMSelection* _result;
  _com_dispatch_method( this, 0x57, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline VARIANT IXMLDOMSelection::getProperty(
    BSTR name )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x58, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", name);
  return _variant_t( _result, false ) ;
}

inline HRESULT IXMLDOMSelection::setProperty(
    BSTR name,
    VARIANT value )
{
  return _com_dispatch_method( this, 0x59, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x000c", name, value );
}

//
// Interface XMLDOMDocumentEvents wrapper methods:
//

inline HRESULT XMLDOMDocumentEvents::ondataavailable( )
{
  HRESULT _result;
  _com_dispatch_method( this, 0xc6, DISPATCH_METHOD , VT_HRESULT, (void*)&_result, NULL);
  return _result;
}

inline HRESULT XMLDOMDocumentEvents::onreadystatechange( )
{
  HRESULT _result;
  _com_dispatch_method( this, 0xfffffd9f, DISPATCH_METHOD , VT_HRESULT, (void*)&_result, NULL);
  return _result;
}

//
// Interface IDSOControl wrapper methods:
//

inline struct IXMLDOMDocument* IDSOControl::GetXMLDocument( )
{
  struct IXMLDOMDocument* _result;
  _com_dispatch_method( this, 0x10001, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IDSOControl::PutXMLDocument(
    struct IXMLDOMDocument* rhs )
{
  return _com_dispatch_method( this, 0x10001, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c", rhs );
}

inline long IDSOControl::GetJavaDSOCompatible( )
{
  long _result;
  _com_dispatch_method( this, 0x10002, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IDSOControl::PutJavaDSOCompatible(
    long rhs )
{
  return _com_dispatch_method( this, 0x10002, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline long IDSOControl::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xfffffdf3, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface IXMLHTTPRequest wrapper methods:
//

inline HRESULT IXMLHTTPRequest::open(
    BSTR bstrMethod,
    BSTR bstrUrl,
    VARIANT varAsync,
    VARIANT bstrUser,
    VARIANT bstrPassword )
{
  return _com_dispatch_method( this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008\x000c\x000c\x000c", bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword );
}

inline HRESULT IXMLHTTPRequest::setRequestHeader(
    BSTR bstrHeader,
    BSTR bstrValue )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", bstrHeader, bstrValue );
}

inline BSTR IXMLHTTPRequest::getResponseHeader(
    BSTR bstrHeader )
{
  BSTR _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", bstrHeader);
  return _bstr_t( _result, false ) ;
}

inline BSTR IXMLHTTPRequest::getAllResponseHeaders( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IXMLHTTPRequest::send(
    VARIANT varBody )
{
  return _com_dispatch_method( this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", varBody );
}

inline HRESULT IXMLHTTPRequest::abort( )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline long IXMLHTTPRequest::Getstatus( )
{
  long _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLHTTPRequest::GetstatusText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline IDispatch* IXMLHTTPRequest::GetresponseXML( )
{
  IDispatch* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_DISPATCH, (void*)&_result, NULL);
  return _result;
}

inline BSTR IXMLHTTPRequest::GetresponseText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IXMLHTTPRequest::GetresponseBody( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT IXMLHTTPRequest::GetresponseStream( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline long IXMLHTTPRequest::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IXMLHTTPRequest::Putonreadystatechange(
    IDispatch* rhs )
{
  return _com_dispatch_method( this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0009", rhs );
}

//
// Interface IServerXMLHTTPRequest wrapper methods:
//

inline HRESULT IServerXMLHTTPRequest::open(
    BSTR bstrMethod,
    BSTR bstrUrl,
    VARIANT varAsync,
    VARIANT bstrUser,
    VARIANT bstrPassword )
{
  return _com_dispatch_method( this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008\x000c\x000c\x000c", bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword );
}

inline HRESULT IServerXMLHTTPRequest::setRequestHeader(
    BSTR bstrHeader,
    BSTR bstrValue )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", bstrHeader, bstrValue );
}

inline BSTR IServerXMLHTTPRequest::getResponseHeader(
    BSTR bstrHeader )
{
  BSTR _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", bstrHeader);
  return _bstr_t( _result, false ) ;
}

inline BSTR IServerXMLHTTPRequest::getAllResponseHeaders( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IServerXMLHTTPRequest::send(
    VARIANT varBody )
{
  return _com_dispatch_method( this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", varBody );
}

inline HRESULT IServerXMLHTTPRequest::abort( )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline long IServerXMLHTTPRequest::Getstatus( )
{
  long _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IServerXMLHTTPRequest::GetstatusText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline IDispatch* IServerXMLHTTPRequest::GetresponseXML( )
{
  IDispatch* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_DISPATCH, (void*)&_result, NULL);
  return _result;
}

inline BSTR IServerXMLHTTPRequest::GetresponseText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IServerXMLHTTPRequest::GetresponseBody( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT IServerXMLHTTPRequest::GetresponseStream( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline long IServerXMLHTTPRequest::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IServerXMLHTTPRequest::Putonreadystatechange(
    IDispatch* rhs )
{
  return _com_dispatch_method( this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0009", rhs );
}

inline HRESULT IServerXMLHTTPRequest::setTimeouts(
    long resolveTimeout,
    long connectTimeout,
    long sendTimeout,
    long receiveTimeout )
{
  return _com_dispatch_method( this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0003\x0003", resolveTimeout, connectTimeout, sendTimeout, receiveTimeout );
}

inline boolean IServerXMLHTTPRequest::waitForResponse(
    VARIANT timeoutInSeconds )
{
  boolean _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000c", timeoutInSeconds);
  return _result;
}

inline VARIANT IServerXMLHTTPRequest::getOption(
    SERVERXMLHTTP_OPTION option )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x000c", option);
  return _variant_t( _result, false ) ;
}

inline HRESULT IServerXMLHTTPRequest::setOption(
    SERVERXMLHTTP_OPTION option,
    VARIANT value )
{
  return _com_dispatch_method( this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c\x000c", option, value );
}

//
// Interface IServerXMLHTTPRequest2 wrapper methods:
//

inline HRESULT IServerXMLHTTPRequest2::open(
    BSTR bstrMethod,
    BSTR bstrUrl,
    VARIANT varAsync,
    VARIANT bstrUser,
    VARIANT bstrPassword )
{
  return _com_dispatch_method( this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008\x000c\x000c\x000c", bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword );
}

inline HRESULT IServerXMLHTTPRequest2::setRequestHeader(
    BSTR bstrHeader,
    BSTR bstrValue )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", bstrHeader, bstrValue );
}

inline BSTR IServerXMLHTTPRequest2::getResponseHeader(
    BSTR bstrHeader )
{
  BSTR _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", bstrHeader);
  return _bstr_t( _result, false ) ;
}

inline BSTR IServerXMLHTTPRequest2::getAllResponseHeaders( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IServerXMLHTTPRequest2::send(
    VARIANT varBody )
{
  return _com_dispatch_method( this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c", varBody );
}

inline HRESULT IServerXMLHTTPRequest2::abort( )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline long IServerXMLHTTPRequest2::Getstatus( )
{
  long _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IServerXMLHTTPRequest2::GetstatusText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline IDispatch* IServerXMLHTTPRequest2::GetresponseXML( )
{
  IDispatch* _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_DISPATCH, (void*)&_result, NULL);
  return _result;
}

inline BSTR IServerXMLHTTPRequest2::GetresponseText( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline VARIANT IServerXMLHTTPRequest2::GetresponseBody( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline VARIANT IServerXMLHTTPRequest2::GetresponseStream( )
{
  VARIANT _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, NULL);
  return _variant_t( _result, false ) ;
}

inline long IServerXMLHTTPRequest2::GetreadyState( )
{
  long _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IServerXMLHTTPRequest2::Putonreadystatechange(
    IDispatch* rhs )
{
  return _com_dispatch_method( this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0009", rhs );
}

inline HRESULT IServerXMLHTTPRequest2::setTimeouts(
    long resolveTimeout,
    long connectTimeout,
    long sendTimeout,
    long receiveTimeout )
{
  return _com_dispatch_method( this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0003\x0003\x0003", resolveTimeout, connectTimeout, sendTimeout, receiveTimeout );
}

inline boolean IServerXMLHTTPRequest2::waitForResponse(
    VARIANT timeoutInSeconds )
{
  boolean _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_BOOL, (void*)&_result, L"\x000c", timeoutInSeconds);
  return _result;
}

inline VARIANT IServerXMLHTTPRequest2::getOption(
    SERVERXMLHTTP_OPTION option )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x000c", option);
  return _variant_t( _result, false ) ;
}

inline HRESULT IServerXMLHTTPRequest2::setOption(
    SERVERXMLHTTP_OPTION option,
    VARIANT value )
{
  return _com_dispatch_method( this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c\x000c", option, value );
}

inline HRESULT IServerXMLHTTPRequest2::setProxy(
    SXH_PROXY_SETTING proxySetting,
    VARIANT varProxyServer,
    VARIANT varBypassList )
{
  return _com_dispatch_method( this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000c\x000c\x000c", proxySetting, varProxyServer, varBypassList );
}

inline HRESULT IServerXMLHTTPRequest2::setProxyCredentials(
    BSTR bstrUserName,
    BSTR bstrPassword )
{
  return _com_dispatch_method( this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", bstrUserName, bstrPassword );
}

//
// Interface IMXNamespacePrefixes wrapper methods:
//

inline BSTR IMXNamespacePrefixes::Getitem(
    long index )
{
  BSTR _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0003", index);
  return _bstr_t( _result, false ) ;
}

inline long IMXNamespacePrefixes::Getlength( )
{
  long _result;
  _com_dispatch_method( this, 0x588, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface IVBMXNamespaceManager wrapper methods:
//

inline HRESULT IVBMXNamespaceManager::PutallowOverride(
    boolean rhs )
{
  return _com_dispatch_method( this, 0x57e, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x000b", rhs );
}

inline boolean IVBMXNamespaceManager::GetallowOverride( )
{
  boolean _result;
  _com_dispatch_method( this, 0x57e, DISPATCH_METHOD , VT_BOOL, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IVBMXNamespaceManager::reset( )
{
  return _com_dispatch_method( this, 0x57f, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBMXNamespaceManager::pushContext( )
{
  return _com_dispatch_method( this, 0x580, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBMXNamespaceManager::pushNodeContext(
    struct IXMLDOMNode* contextNode,
    boolean fDeep )
{
  return _com_dispatch_method( this, 0x581, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x400c\x000b", contextNode, fDeep );
}

inline HRESULT IVBMXNamespaceManager::popContext( )
{
  return _com_dispatch_method( this, 0x582, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT IVBMXNamespaceManager::declarePrefix(
    BSTR prefix,
    BSTR namespaceURI )
{
  return _com_dispatch_method( this, 0x583, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x0008", prefix, namespaceURI );
}

inline struct IMXNamespacePrefixes* IVBMXNamespaceManager::getDeclaredPrefixes( )
{
  struct IMXNamespacePrefixes* _result;
  _com_dispatch_method( this, 0x584, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IMXNamespacePrefixes* IVBMXNamespaceManager::getPrefixes(
    BSTR namespaceURI )
{
  struct IMXNamespacePrefixes* _result;
  _com_dispatch_method( this, 0x585, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0008", namespaceURI);
  return _result;
}

inline VARIANT IVBMXNamespaceManager::getURI(
    BSTR prefix )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x586, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008", prefix);
  return _variant_t( _result, false ) ;
}

inline VARIANT IVBMXNamespaceManager::getURIFromNode(
    BSTR strPrefix,
    struct IXMLDOMNode* contextNode )
{
  VARIANT _result;
  _com_dispatch_method( this, 0x587, DISPATCH_METHOD , VT_VARIANT, (void*)&_result, L"\x0008\x400c", strPrefix, contextNode);
  return _variant_t( _result, false ) ;
}
